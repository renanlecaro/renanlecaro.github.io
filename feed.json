{
    "version": "https://jsonfeed.org/version/1",
    "title": "Renan LE CARO",
    "description": "",
    "home_page_url": "https://lecaro.me",
    "feed_url": "https://lecaro.me/feed.json",
    "user_comment": "",
    "author": {
        "name": "Renan LE CARO"
    },
    "items": [
        {
            "id": "https://lecaro.me/how-to-start-an-ubuntu-sms-farm.html",
            "url": "https://lecaro.me/how-to-start-an-ubuntu-sms-farm.html",
            "title": "How to start an Ubuntu &quot;SMS farm&quot;",
            "summary": "Why start an SMS \"farm\" ? SMS messages are super expensive in France. 0.06€ / message on Twilio, Vonage, etc... So I've resorted to sending SMSs using private phone plans. They are super cheap in france, 2€/month for unlimited SMSs. I'm using one such plan&hellip;",
            "content_html": "<h2>Why start an SMS \"farm\" ? </h2>\n<p>SMS messages are super expensive in France.</p>\n<p><strong> 0.06€ / message</strong> on Twilio, Vonage, etc...</p>\n<p>So I've resorted to sending SMSs using private phone plans. They are super cheap in france, 2€/month for unlimited SMSs.</p>\n<p>I'm using one such plan to send SMSs today, with an old android phone and an SMS gateway app that's not very reliable. I'm sending low volumes of SMS, so it's doing ok, but i'm getting ready to send way more SMSs for many additional users.</p>\n<p>I could try to send all the sms from one phone, but the \"unlimited SMS\" plans actually have an undisclosed hard limit on how much you can send. </p>\n<p>So i'm planning to pool a bunch of SIM cards, SMS farm style, to send the SMSs of ciboulette.net</p>\n<h2>Picking a modem (95€)</h2>\n<table style=\"border-collapse: collapse; width: 100%; height: 416px;\" border=\"0\">\n<tbody>\n<tr style=\"height: 416px;\">\n<td style=\"width: 50%; height: 416px;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: 18.4px; font-weight: var(--font-weight-normal); outline: 3px solid rgba(var(--primary-color-rgb), 0.55)  !important;\" src=\"https://lecaro.me/media/posts/22/Screenshot-from-2021-04-02-12-28-31.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-xs.png 300w ,https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-sm.png 480w ,https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-md.png 768w ,https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-lg.png 1024w ,https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-xl.png 1360w ,https://lecaro.me/media/posts/22/responsive/Screenshot-from-2021-04-02-12-28-31-2xl.png 1600w\"  alt=\"Picture of the modem\" width=\"432\" height=\"449\"></figure></td>\n<td style=\"width: 50%; height: 416px;\">\n<p>The first step was buying a modem pool, i got this one on aliexpress : <a href=\"https://www.aliexpress.com/item/32477370996.html\">FIMT 1/8/16/32/64 ports USB modem pool/GSM sms modem /gsm modem pool edge gprs modem driver</a></p>\n<p>It took about 10 days to arrive in France.</p>\n<p>The ad only talked about how it would work on Windows, so it was a bit of a gamble to try to use it on an Ubuntu server.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The modem looks alright, the only problem that i see is that the USB and power adaptor look like cheap stuffs, and easily get disconnected. That's in contrast with the very \"pro\" looking gadget itself.</p>\n<h2>Sending your first SMS with Ubuntu</h2>\n<p>It took me forever to understand that this modem didn't need any extra drivers, I was just doing it wrong.</p>\n<p>I'm only using one sim card for now, i'll buy more as the needs arise.</p>\n<p>First, make sure you disable the SIM PIN code, using any compatible phone.</p>\n<p>Then insert the sim in any of the bays, make sure the switch for that bay is on,and turn all the empty slots off.</p>\n<p>Connect the antenna because it looks cool (not sure if it does anything really). </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/22/IMG_20210402_122254.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-xs.jpg 300w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-sm.jpg 480w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-md.jpg 768w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-lg.jpg 1024w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-xl.jpg 1360w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122254-2xl.jpg 1600w\"  alt=\"The glorious modem with its sim card\" width=\"696\" height=\"928\"></figure>\n<p class=\"align-center\">The modem</p>\n<p> </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/22/IMG_20210402_122302.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-xs.jpg 300w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-sm.jpg 480w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-md.jpg 768w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-lg.jpg 1024w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-xl.jpg 1360w ,https://lecaro.me/media/posts/22/responsive/IMG_20210402_122302-2xl.jpg 1600w\"  alt=\"Close up to show the direction of the sim card\" width=\"696\" height=\"928\"></figure>\n<p class=\"align-center\">Close up of the sim bay, with the sim card half out to show in which direction to insert it.</p>\n<p>Connect the power adapter, the usb cable, turn the device on. The blue led next to the sim should blink shortly every ~5 seconds. </p>\n<p>Turn on your Ubuntu computer.</p>\n<p>Let's first install our tools </p>\n<pre>sudo apt-get install wvdial screen</pre>\n<p>Type yes when/if needed</p>\n<p>Next, we need to find out modem, run </p>\n<pre>sudo wvdialconf</pre>\n<p>It will scan the various ports to try to find a modem that answers to its requests, and then try to detect the best transfer rate to use.</p>\n<p>It might fail on the first try, then run it again, until you get something like this</p>\n<pre>Found an USB modem on <strong>/dev/ttyACM6</strong>.<br>Modem configuration written to /etc/wvdial.conf.<br>ttyACM6&lt;Info&gt;: Speed <strong>38400</strong>; init \"ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2\"</pre>\n<p>We found our modem. Next we'll need to talk directly to it with AT commande, to send our first message. </p>\n<p>The difficulty is that AT commands are a super old standard, and require at some point to send the control character \"ctrl+z\". If you do that in a normal prompt, it will be recognised as a keyboard shortcut and not be sent as a character.</p>\n<p>So we have to connect to the modem using a very low level interface.</p>\n<pre>sudo screen <strong>/dev/ttyACM6 38400</strong></pre>\n<p>You need to replace the arguments with the corresponding values returned at the last step.</p>\n<p>This opens a blank screen, type <strong>AT</strong> then press enter, the screen should display an \"OK\" answer from the modem. </p>\n<p>To go to sms mode, type <strong>AT+CMGF=1</strong> and validate with enter. It should reply \"OK\"</p>\n<p>To start an sms, type <strong>AT+CMGS=\"+3362XXXXXXX\" (</strong>replace the XXX with your actual phone number) and press enter. It should go to the next line and show a \"&gt;\" character. </p>\n<p>Type the content of your message (possibly on multiple lines) then <strong>validate with ctrl+Z</strong></p>\n<p>It should lag for a second or two then display something like \"+CMGS: 6 OK\"</p>\n<p>You should then receive the sms on your phone. </p>\n<p>Exit the \"screen\" command by pressing \"ctrl+A\" followed by pressing \"d\".</p>\n<p>Summary of the commands :</p>\n<pre>AT<br>OK<br>AT+CMGF=1<br>OK<br>AT+CMGS=\"+3362XXXXXXX\"<br>  &gt; Hey there<br>+CMGS: 6<br><br>OK</pre>\n<p>Once this works, you can investigate SMS servers like <a href=\"http://smstools3.kekekasvi.com/\">smstools</a> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-04-02T14:18:36+02:00",
            "date_modified": "2021-04-02T14:26:48+02:00"
        },
        {
            "id": "https://lecaro.me/github-action-to-check-for-todos-and-fixmes.html",
            "url": "https://lecaro.me/github-action-to-check-for-todos-and-fixmes.html",
            "title": "Github action to check for TODOs and FIXMEs",
            "summary": "I had some TODO and FIXME instructions in random locations in my code that served no purpose, as I was never looking for them. I also use \"console.log\" for temporary debug logs that should be removed in production. I sometimes forget some console.log statements, and&hellip;",
            "content_html": "<p>I had some TODO and FIXME instructions in random locations in my code that served no purpose, as I was never looking for them. I also use \"console.log\" for temporary debug logs that should be removed in production. </p>\n<p>I sometimes forget some console.log statements, and basically always ignore the TODO/FIXME comments. </p>\n<p>So i made a very simple script that fails if there are TODOs, FIXMEs or console.log in your code. This way the PR won't look like it's passing if it's missing an important part.</p>\n<p>Save it in .github/workflows/check_todos.yml</p>\n<pre>name: Look for todos and fixmes<br>on:<br>  pull_request:<br>    branches:<br>      - master<br>jobs:<br>  build:<br>    runs-on: ubuntu-latest<br>    steps:<br>      - uses: actions/checkout@v2<br>      - run: |<br>         if grep --exclude-dir={.git,.github} -rE \"TODO|FIXME|console\\.log\"; then<br>              exit 1<br>         else<br>             echo \"All good\"<br>         fi<br><br></pre>\n<p>I exclude .git because it could contain the text. And I exclude .github so that the regex doesn't match itself. Package files should not be a problem as the script doesn't pull any external dependencies (no npm install)  </p>\n<p>The search is case sensitive, so it will only trip for clear TODOs and not some random method names.</p>\n<p>You get the results really quickly, and because only the source is checked out ,all the generated files/packages should be excluded from the search.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/21/Screenshot-from-2021-03-29-01-16-12.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-xs.png 300w ,https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-sm.png 480w ,https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-md.png 768w ,https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-lg.png 1024w ,https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-xl.png 1360w ,https://lecaro.me/media/posts/21/responsive/Screenshot-from-2021-03-29-01-16-12-2xl.png 1600w\"  alt=\"Screenshot of a failed build\" width=\"989\" height=\"386\"></figure>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-27T13:24:50+01:00",
            "date_modified": "2021-03-29T01:16:37+02:00"
        },
        {
            "id": "https://lecaro.me/configuring-i3-for-headful-e2e-tests.html",
            "url": "https://lecaro.me/configuring-i3-for-headful-e2e-tests.html",
            "title": "Configuring i3 for headful e2e tests",
            "summary": "i3 is nice. End to end tests are nice. Chromium is nice. But they don't get along so well by default. When you run you e2e script with nodemon, each run opens and closes the test browser window. By default, that window appears right by&hellip;",
            "content_html": "<p>i3 is nice. End to end tests are nice. Chromium is nice. But they don't get along so well by default.</p>\n<p>When you run you e2e script with nodemon, <strong>each run opens and closes the test browser</strong> window. By default, that window appears <strong>right by your editor</strong>, messing the layout.</p>\n<p>It's easy to fix though : you just need to <strong>tell i3 what to do with that test browser window</strong>.</p>\n<p>To make every new chromium window appear in the workspace $ws5, add this in ~/.config/i3/config</p>\n<p><code>assign [class=\"Chromium-browser\"] → $ws5</code></p>\n<p>The workspace name is a variable here, but you can put anything. I assign that window to a rarely used workspace. </p>\n<p>Chromium has a different class from Google Chrome, so this has no impact on where the \"real\" browser is started.</p>\n<p>To get the class infos for other browsers, run <code>xprop</code> in a terminal and then click on a window.  </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-27T11:52:52+01:00",
            "date_modified": "2021-03-27T11:52:52+01:00"
        },
        {
            "id": "https://lecaro.me/using-trello-for-feature-requests-priorisation.html",
            "url": "https://lecaro.me/using-trello-for-feature-requests-priorisation.html",
            "title": "Using Trello for feature requests / priorisation ",
            "summary": "I have a few users for my app, and 1000's of ideas on how to improve it. I've been tracking my work in trello, on a public board (my app is still closed source, but i'm as open as possible about the processes of my&hellip;",
            "content_html": "<p>I have a few users for my app, and 1000's of ideas on how to improve it. </p>\n<p>I've been tracking my work in trello, on a public board (my app is still closed source, but i'm as open as possible about the processes of my work). </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/19/Screenshot-from-2021-03-26-22-25-06.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-xs.png 300w ,https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-sm.png 480w ,https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-md.png 768w ,https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-lg.png 1024w ,https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-xl.png 1360w ,https://lecaro.me/media/posts/19/responsive/Screenshot-from-2021-03-26-22-25-06-2xl.png 1600w\"  alt=\"The development board\" width=\"1913\" height=\"925\"></figure>\n<p class=\"align-center\">The <a href=\"https://trello.com/b/GaZSJzzq/planning-de-d%C3%A9veloppement-de-ciboulettenet\">development board</a> (in French)</p>\n<p>I'm the only one doing development work here, but I've invited my clients to join the board. I instructed them to just \"join\" any card that seems like it would be useful to them. I only invited paying customers. </p>\n<p>It's a great way to focus on what's really needed. But i tend to work on some technical stuffs that don't really matter to them right now (like the <a href=\"https://lecaro.me/meteor-lags-aggregates-to-the-rescue.html\">last post</a> about aggregation suggests) so I can't always prioritise what's asked. </p>\n<p>And I get some Trello gold after every signup, but I'm not sure why I should care. </p>\n<p>Ideally, I'd like something similar but integrated in my app, to let users voice their opinions and needs without friction, but I thought i'd postpone that to the time where all the cards with a person on it are already done. </p>\n<p>And services like this already exist I guess, so it's not really worth investing much effort in creating a custom solution.  </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-26T22:30:45+01:00",
            "date_modified": "2021-03-26T22:30:45+01:00"
        },
        {
            "id": "https://lecaro.me/meteor-lags-aggregates-to-the-rescue.html",
            "url": "https://lecaro.me/meteor-lags-aggregates-to-the-rescue.html",
            "title": "Meteor lags ? Aggregates to the rescue !",
            "summary": "My app has 4 main collections in mongo : - A user has many weeks and clients - Each week has many orders, one per client, where the order content is stored (can be empty if the client didn't order that week). Initially, my documents&hellip;",
            "content_html": "<p>My app has 4 main collections in mongo : </p>\n<p>- A <strong>user </strong>has many <strong>weeks </strong>and <strong>clients</strong></p>\n<p>- Each week has many <strong>orders</strong>, one per client, where the order content is stored (can be empty if the client didn't order that week). </p>\n<p>Initially, my documents were quite dry, I was doing the \"joins\" work on the client. It got laggy though, so I moved the joins logic to the meteor server, with <strong>hooks</strong> (<strong>matb33:collection-hooks) </strong>in every directions to keep denormalized fields in sync. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://trello-attachments.s3.amazonaws.com/605b848835c8f765d6d4626e/1025x564/5235adb0e560fb8de807e8488b2e67ec/image.png\" data-is-external-image=\"true\"  alt=\"My mess of hooks, simplified, visualized\" width=\"718\" height=\"395\"></figure>\n<p>It was a pain though, really hard to follow what was going on and to debug. </p>\n<p>There's also potential for chain reactions and never ending hooks loops. </p>\n<p>But mostly, it was <strong>buggy in edge cases</strong>. </p>\n<p>So I'm migrating away from those hooks, and creating an aggregation pipeline per collection (week, client, order) that computes all the dynamic fields for some given ids, and returns the documents where the value is different, plus some additional ids to check in the next pass. </p>\n<p>It's not yet in production, but after this rewrite, my e2e tests are passing. </p>\n<p>Meteor uses mongodb 4.2 in development server. I didn't feel like forcing an update to 4.4, which brings in two very useful features for my use case (the<a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/function/\"> $function</a> operator and the ability to <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#output-to-the-same-collection-that-is-being-aggregated\">$merge</a> to the collection that you are aggregating on).</p>\n<p>So I've been $writing:{ $some: {$nested: {$queries:'It's a pain''}}} . I'm back to junior level of mastery in this new paradigm, where \"It works\" comes as a surprise. I'm sure i'll rewrite those ugly aggregations at some point, but for now they seem to do the job. </p>\n<p>One nice approach to using aggregation pipelines in meteor is to declare them in a separate js file, and then have a simple, non-meteor script that runs the aggregation and logs the results. </p>\n<p>I use nodemon to watch the files, and get a very fast feedback loop, without the need to wait for the meteor server to recompile. Great when you're learning as you go. </p>\n<p>I start the script like this (-r esm allows me to use modern imports) </p>\n<pre>nodemon -e js  -r esm tests/scripts/mongofun.js</pre>\n<p> And the script itself is very simple. It just runs the query </p>\n<p>tests/scripts/mongofun.js :</p>\n<pre>const mongoUrl='mongodb://127.0.0.1:3001/meteor'<br><br>async function actual_aggregation(db) {<br>  const result = await db<br>    .collection('Orders')<br>    .aggregate([<br>      {<br>        $match: {_id:'&lt;some test id&gt;'}<br>      }, <br>      ...the_pipeline_imported_from_the_meteor_source<br>    ])<br>    .toArray();<br>  console.log(result);<br>}<br><br>const mongodb = require('mongodb');<br>const client = new mongodb.MongoClient(mongoUrl, {<br>  useUnifiedTopology: true<br>});<br><br>client.connect().then(<br>  async () =&gt; {<br>    const start = Date.now();<br>    await author_aggregation(client.db());<br>    console.log('took ' + (Date.now() - start) + ' ms');<br>  },<br>  e =&gt; console.error(e)<br>);</pre>\n<p>Anyway, that's all for today :)</p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-26T22:16:01+01:00",
            "date_modified": "2021-03-26T22:21:33+01:00"
        },
        {
            "id": "https://lecaro.me/basic-i3blocks-controls-for-ubuntu-rhythmbox.html",
            "url": "https://lecaro.me/basic-i3blocks-controls-for-ubuntu-rhythmbox.html",
            "title": "Basic i3blocks controls for ubuntu rhythmbox",
            "summary": "I've switched over from Spotify to Rhythmbox today. Spotify was a bit unstable on my system, it sometimes even struggled to playback offline playlists. I'm back to the good old \"music\" folder with files of long forgotten origins. The default ubuntu music player, rhythmbox, seems&hellip;",
            "content_html": "<p>I've switched over from Spotify to Rhythmbox today. Spotify was a bit unstable on my system, it sometimes even struggled to playback offline playlists.</p>\n<p>I'm back to the good old \"music\" folder with files of long forgotten origins.  </p>\n<p>The default ubuntu music player, rhythmbox,  seems not too bad, i don't need it to do much anyway. </p>\n<p>I just had to port my i3 bar script to : </p>\n<ul>\n<li>show the track currently playing</li>\n<li>go to next track on right click</li>\n<li>play/pause on left click<br><br></li>\n</ul>\n<p> </p>\n<figure class=\"post__image align-center\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/17/i3script\" alt=\"\" width=\"478\" height=\"53\"></figure>\n<p>The look of the \"widget\", pretty basic. </p>\n<p>I wanted to add a play/pause icon but </p>\n<ul>\n<li>i didn't find a way to ask rhythmbox-client if the  music is played or paused</li>\n<li>my ears are usually enough to know if anything i s playing </li>\n</ul>\n<p>I also added a little regexp to remove anything in parenthesis in the track name, to remove \"(Original mix)\" mentions and such. </p>\n<p>.config/i3/i3blocks.conf :</p>\n<pre>[music]<br>command=node ~/.config/i3/rhythmbox.js<br>interval=5</pre>\n<p><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">The actual node script (I suck at bash, that's why i'm using node for this)</span></p>\n<p><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">~/.config/i3/rhythmbox.js</span></p>\n<pre><br>const {execSync}=require('child_process')<br><br>// apply click actions<br>switch(process.env.BLOCK_BUTTON){<br>  case  '1': execSync('rhythmbox-client --play-pause');<br>    break; <br>  case  '3': execSync('rhythmbox-client --next');<br>    break;<br>}<br><br>// get track name<br>const playing=(execSync('rhythmbox-client --print-playing').toString())||'';<br><br>// clean track name<br>const formatted=playing.replace(/\\([^\\)]+\\)/gi,'')<br><br>// output it<br>console.log(formatted);</pre>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-25T10:21:45+01:00",
            "date_modified": "2021-03-26T22:22:27+01:00"
        },
        {
            "id": "https://lecaro.me/3-video-games-ive-spend-100-hours-on.html",
            "url": "https://lecaro.me/3-video-games-ive-spend-100-hours-on.html",
            "title": "3 video games I&#x27;ve spent 100+ hours on",
            "summary": "I don't really play much those days, but I've had some great gaming experiences I felt like sharing today. This strategy game is free, ad free, and has an amazing replay-ability thanks to the user generated levels. It's easy to learn, and not too hard&hellip;",
            "content_html": "<p>I don't really play much those days, but I've had some great gaming experiences I felt like sharing today.</p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"0\">\n<tbody>\n<tr>\n<td style=\"width: 50%;\"><figure class=\"post__image align-center\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/16/antiyoy.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/16/responsive/antiyoy-xs.png 300w ,https://lecaro.me/media/posts/16/responsive/antiyoy-sm.png 480w ,https://lecaro.me/media/posts/16/responsive/antiyoy-md.png 768w ,https://lecaro.me/media/posts/16/responsive/antiyoy-lg.png 1024w ,https://lecaro.me/media/posts/16/responsive/antiyoy-xl.png 1360w ,https://lecaro.me/media/posts/16/responsive/antiyoy-2xl.png 1600w\"  alt=\"\" width=\"240\" height=\"400\"></figure></td>\n<td style=\"width: 50%;\">\n<h2>Antiyoy - Android</h2>\n<p> This <strong>strategy</strong> game is free, ad free, and has an amazing replay-ability thanks to the user generated levels.  </p>\n<p>It's <strong>easy to learn</strong>, and not too hard to master, after a while most levels are trivial. </p>\n<p>Some get tough though, and I had to look at the solutions from random Russian Youtube videos at times. </p>\n</td>\n</tr>\n<tr>\n<td style=\"width: 50%;\"><figure class=\"n3VNCb\"><img loading=\"lazy\"  src=\"https://i.ytimg.com/vi/J8SBp4SyvLc/maxresdefault.jpg\" data-is-external-image=\"true\"  alt=\"Factorio - Trailer 2020 - YouTube\" data-noaft=\"1\"></figure></td>\n<td style=\"width: 50%;\">\n<h2>Factorio - Linux</h2>\n<p>It's one of those game that's programmer's heaven. Or hell. It's very similar to <strong>programming</strong> (design, debugging, automating, constantly learning) <strong>but with guns</strong>.</p>\n</td>\n</tr>\n<tr>\n<td style=\"width: 50%;\"><figure class=\"n3VNCb\"><img loading=\"lazy\"  src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Nuclear_Throne_screenshot_10.png/1200px-Nuclear_Throne_screenshot_10.png\" data-is-external-image=\"true\"  alt=\"Nuclear Throne — Wikipédia\" data-noaft=\"1\"></figure></td>\n<td style=\"width: 50%;\">\n<h2>Nuclear throne - Linux</h2>\n<p>This is one of the <strong>roguelikes</strong> I sicked to, and after a while i got pretty good at it. <strong>Runs are short</strong>, so it's perfect to spend a few minutes before starting a complicated topic. It's frustrating enough that you don't end up playing 2 hours without realising it.  </p>\n</td>\n</tr>\n</tbody>\n</table>\n<p> </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-25T00:45:38+01:00",
            "date_modified": "2021-03-25T10:06:17+01:00"
        },
        {
            "id": "https://lecaro.me/javascript-minification-with-sed.html",
            "url": "https://lecaro.me/javascript-minification-with-sed.html",
            "title": "Javascript minification with sed",
            "summary": "I added a few of my projects to those \"Pages under 1MB\" websites. I'm not sure what for, but eh, it's free link estate ! Anyway, while most of those lists are comprised of boring, barely formatted text pages, i stumbled upon a nice one,&hellip;",
            "content_html": "<p>I added a few of my projects to those \"<a href=\"https://1mb.club/\">Pages under 1MB</a>\" websites. I'm not sure what for, but eh, it's free link estate !</p>\n<p>Anyway, while most of those lists are comprised of <a href=\"https://jakob.kaivo.net/\">boring</a>, barely formatted text pages,  i stumbled upon a nice one, this <a href=\"https://tutor.0b.ee/\">touch type trainer</a> in 2 KB of js. The best thing about it  is not really the tool (it's limited, obviously) but the absurd way the author got down to that 2kb size, in particular this little gem. </p>\n<p><a href=\"https://github.com/KaarelP2rtel/keyboard-tutor/blob/master/minify.sh\">minify.sh</a> </p>\n<pre>sed -i 's/tutor-window/tw/g' \"$target\"<br>sed -i 's/tutor-container/tc/g' \"$target\"<br>sed -i 's/tutor-completed/tm/g' \"$target\"<br>sed -i 's/tutor-cursor/tr/g' \"$target\"<br>sed -i 's/tutor-uncompleted/tu/g' \"$target\"<br>sed -i 's/tutor-result/te/g' \"$target\"<br>sed -i 's/tutor-status/ts/g' \"$target\"<br>sed -i 's/current-layout/cl/g' \"$target\"</pre>\n<p>I have no words, it's beautiful :) </p>\n<p>I remember going to similar extremes on <a href=\"https://github.com/renanlecaro/importabular/blob/master/src/index.js#L50\">importabular</a>. </p>\n<p>All the private methods had names prefixed by an underscore, and then i had some instructions for the minifying tool to not keep names with that prefix. </p>\n<p>It shaved a few kilobytes from the already tiny lib, but i reverted it after to make it easier to subclass the Importabular class. </p>\n<p> That period with the lower bars on <a href=\"https://bundlephobia.com/result?p=importabular@0.2.9\">bundlephobia</a> is where this behavior was installed</p>\n<p>Anyway, gzipped code golf is always a lot of fun. </p>\n<p> </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-24T22:41:32+01:00",
            "date_modified": "2021-03-24T22:41:32+01:00"
        },
        {
            "id": "https://lecaro.me/be-careful-what-you-ping-for.html",
            "url": "https://lecaro.me/be-careful-what-you-ping-for.html",
            "title": " Be careful what you ping for",
            "summary": "I have a setup to know when my main app, ciboulette.net, is down. It's based on statuscake, which pings my marketing site every 5 minutes, and also my main app. It used to ping a third endpoint, which was an order form deep inside my&hellip;",
            "content_html": "<p>I have a setup to know when my main app, ciboulette.net, is down.</p>\n<p>It's based on <a href=\"https://www.statuscake.com/\">statuscake</a>, which pings my marketing site every 5 minutes, and also my main app. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://lecaro.me/media/posts/14/Screenshot-from-2021-03-24-15-23-56.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-xs.png 300w ,https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-sm.png 480w ,https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-md.png 768w ,https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-lg.png 1024w ,https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-xl.png 1360w ,https://lecaro.me/media/posts/14/responsive/Screenshot-from-2021-03-24-15-23-56-2xl.png 1600w\"  alt=\"Screenshot of statuscake\" width=\"649\" height=\"271\"></figure>\n<p>It used to ping a third endpoint, which was an order form deep inside my app. </p>\n<p>The idea was to check the the clients of my clients should be able to order veggies, so pinging a specific, real page would make sense.</p>\n<p>I also used to log every action that would happen on such an order, directly in an array within the \"order\" document.</p>\n<p>It means that every 5 minute, the document was getting a tiny bit bigger. </p>\n<p>Today, i tried to mongorestore a production dump on my local dev environment to get fresh data. It's very useful to see how the real data would look like in the new version, and lets me see missuses and bugs that i would miss otherwise. </p>\n<p>So i tried to import my production dump (the db needs renaming from \"ciboulette\" to \"meteor\" to work locally) </p>\n<pre>renan@renan-hp:~/cl/app$ cat dump/daily_21-03-24.backup.gzip | mongorestore --archive --gzip  --nsFrom='ciboulette.*' --nsTo='meteor.*' --uri=mongodb://127.0.0.1:3001/<br>2021-03-24T15:31:06.076+0100 preparing collections to restore from<br>2021-03-24T15:31:06.083+0100 reading metadata for meteor.shortUrls from archive on stdin<br>2021-03-24T15:31:06.102+0100 restoring meteor.shortUrls from archive on stdin<br>2021-03-24T15:31:06.263+0100 reading metadata for meteor.opens from archive on stdin<br>2021-03-24T15:31:06.278+0100 restoring meteor.opens from archive on stdin<br>2021-03-24T15:31:06.753+0100 reading metadata for meteor.Orders from archive on stdin<br>2021-03-24T15:31:06.767+0100 restoring meteor.Orders from archive on stdin<br>2021-03-24T15:31:07.308+0100 reading metadata for meteor.logs from archive on stdin<br>2021-03-24T15:31:07.318+0100 restoring meteor.logs from archive on stdin<br>2021-03-24T15:31:07.827+0100 no indexes to restore<br>2021-03-24T15:31:07.827+0100 finished restoring meteor.shortUrls (8224 documents, 0 failures)<br>2021-03-24T15:31:08.269+0100 no indexes to restore<br>2021-03-24T15:31:08.269+0100 finished restoring meteor.opens (21263 documents, 0 failures)<br>2021-03-24T15:31:08.503+0100 finished restoring meteor.Orders (32999 documents, 1 failure)<br>2021-03-24T15:31:08.503+0100 Failed: <strong>meteor.Orders: error restoring from archive</strong> on stdin: bulk write error: [{[{<strong>write to oplog failed: BadValue: object to insert exceeds cappedMaxSize</strong>}]}, {&lt;nil&gt;}]<br>2021-03-24T15:31:08.503+0100 32999 document(s) restored successfully. 1 document(s) failed to restore.</pre>\n<p>It took me quite a while to pinpoint the problem. </p>\n<p>Luckily, the same dump would import fine in a real mongod instance, the problem seemed to be only with the meteor provided development mongo instance. </p>\n<p>The problem seemed to be be with some order documents. </p>\n<p>So, first i wiped the local \"meteor\" db in mongod</p>\n<pre>mongo mongodb://127.0.0.1:27017/meteor --eval \"db.dropDatabase()\"</pre>\n<p>Then i imported the dump there</p>\n<pre>cat dump/daily_21-03-24.backup.gzip | mongorestore --archive --gzip  --nsFrom='ciboulette.*' --nsTo='meteor.*'</pre>\n<p>I tried removing all documents from db.Orders, dumping, and then importing that to meteor, it worked. But i was missing my main collection.</p>\n<p>I then used this script to find the biggest document and its _id within my mongo collection</p>\n<pre> mongo  mongodb://127.0.0.1:27017/meteor --eval \"(()=&gt;{var max=0,maxId=null; <strong>db.Orders</strong>.find().forEach(o=&gt;{var s=<strong>Object.bsonsize</strong>(o);if(s&gt;max){max=s;maxId=o._id}}); return {max,maxId}})()\"<br><br>MongoDB server version: 4.4.4<br>{ <strong>\"max\" : 14199831</strong>, \"maxId\" : \"GBeerkZ46dcjAgLtu\" }</pre>\n<p>14 199 831 bytes, holly molly ! About 14 megabytes of text in one document.</p>\n<p>A findOne query allowed me to see that it was the \"Order.logs\" field that was so full.</p>\n<p>So i cleaned up this field in  all documents :</p>\n<pre>renan@renan-hp:~/cl/app$ mongo mongodb://127.0.0.1:27017/meteor --eval 'db.Orders.update({logs:{ $exists:true}},<strong>{$unset:{logs:\"\"}},{multi:true}</strong>);'<br>MongoDB shell version v4.4.4<br>connecting to: mongodb://127.0.0.1:27017/meteor?compressors=disabled&amp;gssapiServiceName=mongodb<br>Implicit session: session { \"id\" : UUID(\"bb02fe49-5241-4beb-82ea-fbdc4c325998\") }<br>MongoDB server version: 4.4.4<br>WriteResult({ \"nMatched\" : 180383, \"nUpserted\" : 0, <strong>\"nModified\" : 180383</strong> })</pre>\n<p> And re-run the maximum size check </p>\n<pre>mongo mongodb://127.0.0.1:27017/meteor --eval \"(()=&gt;{var max=0,maxId=null; db.Orders.find().forEach(o=&gt;{var s=Object.bsonsize(o);if(s&gt;max){max=s;maxId=o._id}}); return {max,maxId}})()\"<br>{ \"max\" : <strong>7578</strong>, \"maxId\" : \"eYdGxbBKDNfKZYZw8\" }</pre>\n<p>Much, much better :)</p>\n<p>So, all that was left was to dump that data, load the dump in meteor and all was fine.</p>\n<p>I added a migration to clean that field in production too.  It will run on the next deploy. </p>\n<p> </p>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
            ],
            "date_published": "2021-03-24T15:49:39+01:00",
            "date_modified": "2021-03-24T15:49:39+01:00"
        },
        {
            "id": "https://lecaro.me/oh-the-joy-of-e2e-testing.html",
            "url": "https://lecaro.me/oh-the-joy-of-e2e-testing.html",
            "title": "Oh, the joy of Meteor e2e testing !",
            "summary": "I'm setting up e2e testing on my Meteor app, ciboulette.net. I had done it in the past but after large UI changes i just removed the tests as they were completely stale and generally painful to work with : I'm trying again, this time using&hellip;",
            "content_html": "<p>I'm setting up e2e testing on my Meteor app, ciboulette.net.</p>\n<p><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">I had done it in the past but after large UI changes i just removed the tests as they were completely stale and generally painful to work with : </span></p>\n<ul>\n<li>they were <strong>brittle and/or slow</strong></li>\n<li>they were a <strong>pain to edit</strong>. </li>\n<li>they didn't run in <strong>CI</strong></li>\n</ul>\n<p><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">I'm trying again, this time using <strong>playwright.</strong></span></p>\n<p>To <strong>make the tests less brittle</strong>, i <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">had to disable some of the \"smarts\" of the app to make the tests work at high speed  : </span></p>\n<ul>\n<li><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Instead of deferring heavy workloads, I run them synchronously before returning from a method.</span></li>\n<li><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">My modal windows wait for the method result to come back from the server (no optimistic UI magic)</span></li>\n<li><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">I had some logic to ignore double clicks that I had to disable in e2e mode</span></li>\n<li>I completely mocked external services (google maps, google image, emails, sms, etc..)</li>\n</ul>\n<p>To <strong>make editing easier</strong>, I had to fix a few things :</p>\n<ul>\n<li>I start the e2e server with a different meteor local file, on a different port, with dedicated settings</li>\n<li><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">I don't use the headful mode because it always start in the wrong place.</span></li>\n<li>I take screenshots at every step, outputting the screenshot to one file that refreshes automatically when viewed with eog (eye of gnome) </li>\n<li>I use nodemon to restart the tests when i change them (but not when I change any other file) </li>\n<li>I start both my headless tests and eog with <strong><strong>npm-run-all</strong></strong></li>\n</ul>\n<p>Running the tests in <strong>github ci</strong></p>\n<ul>\n<li>The CI scrip uses <strong>start-server-and-test</strong> to start the meteor server in e2e mode and run the headless tests against it</li>\n<li>The e2e Ci script runs<strong> npm install</strong>, but all other scripts run <strong>npm install --production</strong>. Playwright is heavy and is not required to build the app so i've added it as a devDependency. The unit tests are lightweight so i've added jest as a normal dependency.</li>\n</ul>\n<p>The <strong>remaining challenge</strong> I have is to create snapshots at different stages of the test (page url, db content, cookies) so that i can skip most of the e2e tests suite when editing a small part of it. It's tricky, involves hardcoded mongo urls, some mongorestore and mongodump run with execSync .. and not working yet. </p>\n<p> </p>\n<p>Extract of my package.json scripts :</p>\n<pre>\"e2e:server\": \"METEOR_LOCAL_DIR=.meteor/e2e  meteor --port 4000 --settings settings.e2e.json\",<br>\"e2e:cli:showImages\": \"eog tests/e2e/last-test-state.png\",<br>\"e2e:cli:nodemon\": \"SNAPALL=true nodemon  --watch tests/e2e/01_signup.js tests/e2e/01_signup.js\",<br>\"e2e:cli\": \"run-p e2e:cli:* \",<br>\"e2e:ci:node\": \"node tests/e2e/01_signup.js \",<br>\"e2e:ci\": \"start-server-and-test e2e:server http://localhost:4000 e2e:ci:node\"</pre>",
            "author": {
                "name": "Renan LE CARO"
            },
            "tags": [
                   "Blog post"
            ],
            "date_published": "2021-03-23T14:35:12+01:00",
            "date_modified": "2021-03-23T14:54:14+01:00"
        }
    ]
}
